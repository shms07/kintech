import type { SpaceID, ThreadID, Space, ThreadComment, SpaceMemberForResponse, SpaceMemberForRequest, GuestSpaceID, Guest, SpaceTemplateID } from "./types";
import { BaseClient } from "./BaseClient";
export declare class SpaceClient extends BaseClient {
    getSpace(params: {
        id: SpaceID;
    }): Promise<Space>;
    deleteSpace(params: {
        id: SpaceID;
    }): Promise<{}>;
    updateSpaceBody(params: {
        id: SpaceID;
        body: string;
    }): Promise<{}>;
    getSpaceMembers(params: {
        id: SpaceID;
    }): Promise<{
        members: SpaceMemberForResponse[];
    }>;
    updateSpaceMembers(params: {
        id: SpaceID;
        members: SpaceMemberForRequest[];
    }): Promise<{}>;
    updateThread(params: {
        id: ThreadID;
        name?: string;
        body?: string;
    }): Promise<{}>;
    addThreadComment(params: ThreadComment): Promise<{
        id: string;
    }>;
    addGuests(params: {
        guests: Guest[];
    }): Promise<{}>;
    deleteGuests(params: {
        guests: string[];
    }): Promise<{}>;
    updateSpaceGuests(params: {
        id: GuestSpaceID;
        guests: string[];
    }): Promise<{}>;
    addSpaceFromTemplate(params: {
        id: SpaceTemplateID;
        name: string;
        members: SpaceMemberForRequest[];
        isPrivate?: boolean;
        isGuest?: boolean;
        fixedMember?: boolean;
    }): Promise<{
        id: SpaceID;
    }>;
}
