"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const fs_1 = __importDefault(require("fs"));
const rimraf_1 = require("rimraf");
const init_1 = require("../init");
describe("init", () => {
    const testDestDir = "testDestDir";
    describe("runInit", () => {
        afterEach(() => {
            (0, rimraf_1.rimrafSync)(`${testDestDir}`);
        });
        const assertManifestContent = (buffer) => {
            const appCustomize = JSON.parse(fs_1.default
                .readFileSync("src/commands/__tests__/fixtures/get-appcustomize-init.json")
                .toString());
            assert_1.default.deepStrictEqual(JSON.parse(buffer.toString()), appCustomize);
        };
        it("should success generating customize-manifest.json", () => __awaiter(void 0, void 0, void 0, function* () {
            const manifestFile = `${testDestDir}/customize-manifest.json`;
            const manifestFileContent = (0, init_1.getInitCustomizeManifest)("1", "ALL");
            yield (0, init_1.generateCustomizeManifest)(manifestFileContent, testDestDir);
            const content = fs_1.default.readFileSync(manifestFile);
            assertManifestContent(content);
            assert_1.default.ok(fs_1.default.existsSync(manifestFile), `test ${manifestFile} exists`);
        }));
    });
});
//# sourceMappingURL=init.test.js.map