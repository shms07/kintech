"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runImport = exports.importCustomizeSetting = void 0;
const fs_1 = __importDefault(require("fs"));
const mkdirp_1 = require("mkdirp");
const path_1 = require("path");
const constants_1 = require("../constants");
const KintoneApiClient_1 = __importStar(require("../KintoneApiClient"));
const messages_1 = require("../messages");
const util_1 = require("../util");
const importCustomizeSetting = (kintoneApiClient, manifest, status, options) => __awaiter(void 0, void 0, void 0, function* () {
    const m = (0, messages_1.getBoundMessage)(options.lang);
    const appId = manifest.app;
    let { retryCount } = status;
    try {
        const appCustomize = kintoneApiClient.getAppCustomize(appId);
        return appCustomize
            .then((resp) => {
            console.log(m("M_UpdateManifestFile"));
            return exportAsManifestFile(appId, options.destDir, resp);
        })
            .then((resp) => {
            console.log(m("M_DownloadUploadedFile"));
            return downloadCustomizeFiles(kintoneApiClient, appId, options.destDir, resp);
        });
    }
    catch (e) {
        const isAuthenticationError = e instanceof KintoneApiClient_1.AuthenticationError;
        retryCount++;
        if (isAuthenticationError) {
            throw new Error(m("E_Authentication"));
        }
        else if (retryCount < constants_1.Constans.MAX_RETRY_COUNT) {
            yield (0, util_1.wait)(1000);
            console.log(m("E_Retry"));
            return (0, exports.importCustomizeSetting)(kintoneApiClient, manifest, { retryCount }, options);
        }
        else {
            throw e;
        }
    }
});
exports.importCustomizeSetting = importCustomizeSetting;
const exportAsManifestFile = (appId, destRootDir, resp) => {
    const toNameOrUrl = (destDir) => (f) => {
        if (f.type === "FILE") {
            return `${destDir}/${f.file.name}`;
        }
        return f.url;
    };
    const desktopJs = resp.desktop.js;
    const desktopCss = resp.desktop.css;
    const mobileJs = resp.mobile.js;
    const mobileCss = resp.mobile.css;
    const customizeJson = {
        app: appId,
        scope: resp.scope,
        desktop: {
            js: desktopJs.map(toNameOrUrl(`${destRootDir}/desktop/js`)),
            css: desktopCss.map(toNameOrUrl(`${destRootDir}/desktop/css`)),
        },
        mobile: {
            js: mobileJs.map(toNameOrUrl(`${destRootDir}/mobile/js`)),
            css: mobileCss.map(toNameOrUrl(`${destRootDir}/mobile/css`)),
        },
    };
    if (!fs_1.default.existsSync(`${destRootDir}`)) {
        mkdirp_1.mkdirp.sync(`${destRootDir}`);
    }
    fs_1.default.writeFileSync(`${destRootDir}/customize-manifest.json`, JSON.stringify(customizeJson, null, 4));
    return resp;
};
const downloadCustomizeFiles = (kintoneApiClient_1, appId_1, destDir_1, _a) => __awaiter(void 0, [kintoneApiClient_1, appId_1, destDir_1, _a], void 0, function* (kintoneApiClient, appId, destDir, { desktop, mobile }) {
    const desktopJs = desktop.js;
    const desktopCss = desktop.css;
    const mobileJs = mobile.js;
    const mobileCss = mobile.css;
    [
        `${destDir}${path_1.sep}desktop${path_1.sep}js${path_1.sep}`,
        `${destDir}${path_1.sep}desktop${path_1.sep}css${path_1.sep}`,
        `${destDir}${path_1.sep}mobile${path_1.sep}js${path_1.sep}`,
        `${destDir}${path_1.sep}mobile${path_1.sep}css${path_1.sep}`,
    ].forEach((path) => mkdirp_1.mkdirp.sync(path));
    const desktopJsPromise = desktopJs.map(downloadAndWriteFile(kintoneApiClient, `${destDir}${path_1.sep}desktop${path_1.sep}js`));
    const desktopCssPromise = desktopCss.map(downloadAndWriteFile(kintoneApiClient, `${destDir}${path_1.sep}desktop${path_1.sep}css`));
    const mobileJsPromise = mobileJs.map(downloadAndWriteFile(kintoneApiClient, `${destDir}${path_1.sep}mobile${path_1.sep}js`));
    const mobileCssPromise = mobileCss.map(downloadAndWriteFile(kintoneApiClient, `${destDir}${path_1.sep}mobile${path_1.sep}css`));
    return [
        ...desktopJsPromise,
        ...desktopCssPromise,
        ...mobileJsPromise,
        ...mobileCssPromise,
    ];
});
const downloadAndWriteFile = (kintoneApiClient, destDir) => {
    return (f) => __awaiter(void 0, void 0, void 0, function* () {
        if (f.type !== "URL") {
            const resp = yield kintoneApiClient.downloadFile(f.file.fileKey);
            fs_1.default.writeFileSync(`${destDir}${path_1.sep}${f.file.name}`, Buffer.from(resp));
        }
    });
};
const runImport = (params) => __awaiter(void 0, void 0, void 0, function* () {
    const { username, password, oAuthToken, basicAuthUsername, basicAuthPassword, baseUrl, manifestFile, options, } = params;
    const m = (0, messages_1.getBoundMessage)(options.lang);
    const manifest = JSON.parse(fs_1.default.readFileSync(manifestFile, "utf8"));
    const status = {
        retryCount: 0,
    };
    const kintoneApiClient = new KintoneApiClient_1.default(username, password, oAuthToken, basicAuthUsername, basicAuthPassword, baseUrl, options);
    yield (0, exports.importCustomizeSetting)(kintoneApiClient, manifest, status, options);
    console.log(m("M_CommandImportFinish"));
});
exports.runImport = runImport;
//# sourceMappingURL=import.js.map