"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runInit = exports.generateCustomizeManifest = exports.getInitCustomizeManifest = void 0;
const fs_1 = __importDefault(require("fs"));
const mkdirp_1 = require("mkdirp");
const messages_1 = require("../messages");
const getInitCustomizeManifest = (appId, scope) => {
    return {
        app: appId,
        scope,
        desktop: {
            js: [],
            css: [],
        },
        mobile: {
            js: [],
            css: [],
        },
    };
};
exports.getInitCustomizeManifest = getInitCustomizeManifest;
const generateCustomizeManifest = (customizeManifest, destDir) => {
    if (!fs_1.default.existsSync(`${destDir}`)) {
        mkdirp_1.mkdirp.sync(`${destDir}`);
    }
    return new Promise((resolve, reject) => {
        return fs_1.default.writeFile(`${destDir}/customize-manifest.json`, JSON.stringify(customizeManifest, null, 4), (err) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(JSON.stringify(customizeManifest, null, 4));
            }
        });
    });
};
exports.generateCustomizeManifest = generateCustomizeManifest;
const runInit = (appId, scope, lang, destDir) => __awaiter(void 0, void 0, void 0, function* () {
    const m = (0, messages_1.getBoundMessage)(lang);
    const customizeManifest = (0, exports.getInitCustomizeManifest)(appId, scope);
    yield (0, exports.generateCustomizeManifest)(customizeManifest, destDir);
    console.log(`${destDir}/${m("M_CommandInitFinish")}`);
});
exports.runInit = runInit;
//# sourceMappingURL=init.js.map