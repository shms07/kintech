export interface Option {
    proxy: string;
    guestSpaceId: number;
}
export type UpdateAppCustomizeParameter = {
    app: string | number;
    scope?: "ALL" | "ADMIN" | "NONE" | undefined;
    desktop?: {
        [key: string]: unknown;
    };
    mobile?: {
        [key: string]: unknown;
    };
    revision?: string | number;
};
export default class KintoneApiClient {
    options: Option;
    private restApiClient;
    constructor(username: string | null, password: string | null, oAuthToken: string | null, basicAuthUsername: string | null, basicAuthPassword: string | null, baseUrl: string, options: Option);
    uploadFile(filePath: string): Promise<{
        fileKey: string;
    }>;
    prepareCustomizeFile(fileOrUrl: string): Promise<any>;
    updateCustomizeSetting(params: UpdateAppCustomizeParameter): Promise<{
        revision: string;
    }>;
    deploySetting(appId: string): Promise<{}>;
    waitFinishingDeploy(appId: string, callback: () => void): Promise<void>;
    downloadFile(fileKey: string): Promise<ArrayBuffer>;
    getAppCustomize(appId: string): Promise<{
        scope: import("@kintone/rest-api-client/lib/src/client/types").AppCustomizeScope;
        desktop: import("@kintone/rest-api-client/lib/src/client/types").AppCustomizeForResponse;
        mobile: import("@kintone/rest-api-client/lib/src/client/types").AppCustomizeForResponse;
        revision: string;
    }>;
    private getBase64EncodedCredentials;
    private getBasicAuthorization;
}
export declare class AuthenticationError extends Error {
}
